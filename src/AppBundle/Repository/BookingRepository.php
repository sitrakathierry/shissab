<?php

namespace AppBundle\Repository;

/**
 * BookingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookingRepository extends \Doctrine\ORM\EntityRepository
{
    public function getList(
        $agence, 
        $recherche_par = '', 
        $a_rechercher = '',
        $categorie = 0,
        $statut = 100,
        $chambre = 0,
        $type_date = '', 
        $mois = '', 
        $annee = '', 
        $date_specifique = '', 
        $debut_date = '', 
        $fin_date = ''
    )
    {
        $em = $this->getEntityManager();
        
        $query = "  select b.id, ch.nom as chambre, date_format(b.date_entree,'%d/%m/%Y') as date_entree, date_format(b.date_sortie,'%d/%m/%Y') as date_sortie, b.nb_pers, b.nb_nuit, b.avec_petit_dejeuner, CONCAT(LPAD(b.id, 6, '0'),'/HB') as num, b.statut, rb.montant as montant_remboursement, if(rb.id,(b.total - rb.montant),b.total) as total
                    from booking b
                    inner join chambre ch on (b.chambre = ch.id)
                    left join categorie_chambre cc on (ch.categorie_chambre = cc.id)
                    left join remboursement_booking rb on (b.remboursement_booking = rb.id)
                    where b.id is not null ";

        if ($agence) {
            $query .= " and b.agence = " . $agence ;
        }

        if ($statut != 100) {
            $query .= " and b.statut = " . $statut ;
        }


        if ($categorie) {
            $query .= " and cc.id = " . $categorie ;
        }

        if ($chambre) {
            $query .= " and ch.id = " . $chambre ;
        }

        if ($type_date) {

            $options = array(
                'type_date' =>$type_date,
                'mois' =>$mois,
                'annee' =>$annee,
                'date_specifique' =>$date_specifique,
                'debut_date' =>$debut_date,
                'fin_date' =>$fin_date,
            );

            $query .= $this->dateQuery($options);
            
        }

        $query .= " order by b.date_entree desc";

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        $response = [];

        foreach ($result as $key => $booking) {
            $result[$key]['total_reservation'] = $this->totalReservation($booking['id']);
            $result[$key]['total_emporter'] = $this->totalEmporter($booking['id']);
            $result[$key]['periode'] = $this->getPeriode($booking['date_entree'], $booking['date_sortie']);
        }

        usort($result, function($a,$b){
                return $a['periode'] <=> $b['periode'];
        });

        return $result;
    }

    public function getPeriode($date_entree, $date_sortie)
    {
        $date_entree = \DateTime::createFromFormat('j/m/Y', $date_entree);
        $date_sortie = \DateTime::createFromFormat('j/m/Y', $date_sortie);
        $now = new \DateTime('now');

        if ($date_sortie->format('Y-m-d') < $now->format('Y-m-d')) {
            return 3;
        }

        if (($date_entree->format('Y-m-d') <= $now->format('Y-m-d')) && ($now->format('Y-m-d') <= $date_sortie->format('Y-m-d')) ) {
            return 1;
        }

        if ($date_sortie->format('Y-m-d') > $now->format('Y-m-d')) {
            return 2;
        }
    }



    public function totalReservation($booking)
    {
        $em = $this->getEntityManager();

        $query = "  select sum(r.total) as total 
                        from reservation r
                        inner join booking b on (r.booking = b.id)
                        where b.id = " . $booking;

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        if (!empty($result)) {
            return $result[0]['total'];
        }

        return 0;
    }


    public function totalEmporter($booking)
    {
        $em = $this->getEntityManager();

        $query = "  select sum(e.total) as total 
                        from emporter e
                        inner join booking b on (e.booking = b.id)
                        where b.id = " . $booking;

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        if (!empty($result)) {
            return $result[0]['total'];
        }

        return 0;
    }

    public function dateQuery($options)
    {
        $query = "";

        switch ($options['type_date']) {
            case '1':
                $now = new \DateTime();
                $date_now = $now->format('d/m/Y');
                $query .= " and date_format(b.date_entree,'%d/%m/%Y') <= '" . $date_now ."'";
                $query .= " and date_format(b.date_sortie,'%d/%m/%Y') >= '" . $date_now ."'";
                break;

            case '2':
                $mois_annee = $options['mois'] . "-" . $options['annee'];
                $query .= " and ( date_format(b.date_entree,'%m-%Y') = '" . $mois_annee ."'";
                $query .= " or date_format(b.date_sortie,'%m-%Y') = '" . $mois_annee ."')";
                break;

            case '3':
                $query .= " and ( date_format(b.date_entree,'%Y') = '" . $options['annee'] ."'";
                $query .= " or date_format(b.date_sortie,'%Y') = '" . $options['annee'] ."')";
                break;

            case '4':

                $date_specifique = \DateTime::createFromFormat('j/m/Y', $options['date_specifique']);

                $query .= " and date_format(b.date_entree,'%Y-%m-%d') <= '" . $date_specifique->format('Y-m-d') ."'";
                $query .= " and date_format(b.date_sortie,'%Y-%m-%d') >= '" . $date_specifique->format('Y-m-d') ."'";
                
                break;

            case '5':
                $debut_date = \DateTime::createFromFormat('j/m/Y', $options['debut_date']);
                $fin_date = \DateTime::createFromFormat('j/m/Y', $options['fin_date']);

                $query .= " and ( (date_format(b.date_entree,'%Y-%m-%d') <= '" . $debut_date->format('Y-m-d') ."'";
                $query .= " and date_format(b.date_sortie,'%Y-%m-%d') >= '" . $debut_date->format('Y-m-d') ."')";

                $query .= " or ( date_format(b.date_entree,'%Y-%m-%d') <= '" . $fin_date->format('Y-m-d') ."'";
                $query .= " and date_format(b.date_sortie,'%Y-%m-%d') >= '" . $fin_date->format('Y-m-d') ."'))";
                break;

            case '6':
                $now = new \DateTime();
                $date_now = $now->format('d/m/Y');
                $query .= " and date_format(b.date_sortie,'%d/%m/%Y') = '" . $date_now ."'";
                break;
        }

        return $query;;
    }


    public function nonConfirmes()
    {
        $em = $this->getEntityManager();

        $query = "  select b.id, b.date, ch.annulation_automatique
                    from booking b
                    inner join chambre ch on (b.chambre = ch.id)
                    where b.statut = 0";

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        return $result;

    }

    public function notifications($agence)
    {
        $em = $this->getEntityManager();
        
        $query = "  select b.id, CONCAT(LPAD(b.id, 6, '0'),'/HB') as num, date_format(b.date_sortie,'%d/%m/%Y') as date_sortie, c.nom as chambre, b.heure_sortie, date_format(b.date_entree,'%d/%m/%Y') as date_entree, b.heure_entree
                    from booking b
                    inner join chambre c on (b.chambre = c.id)
                    where b.statut = 1";

        if ($agence) {
            $query .= " and b.agence = " . $agence ;
        }

        $now = new \DateTime();
        $date_now = $now->format('d/m/Y');

        $query .= " and date_format(b.date_sortie,'%d/%m/%Y') = '" . $date_now . "'";
        $query .= " or date_format(b.date_entree,'%d/%m/%Y') = '" . $date_now . "'";

        $query .= " order by b.date_sortie asc";

        // var_dump($query);die();

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        return $result;
    }
}
