<?php

namespace AppBundle\Repository;

/**
 * ChambreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChambreRepository extends \Doctrine\ORM\EntityRepository
{
    public function getList(
        $agence, 
        $recherche_par = '', 
        $a_rechercher = '',
        $categorie = 0
    )
    {
        $em = $this->getEntityManager();
        
        $query = "  select ch.id, ch.nom, cc.nom as categorie, ch.nb_pers, ch.tarif_pers, ch.tarif_pers_petit_dejeuner, ch.statut, ch.disponibilite
                    from chambre ch
                    inner join categorie_chambre cc on (ch.categorie_chambre = cc.id)
                    where ch.nom is not null ";

        if ($agence) {
            $query .= " and ch.agence = " . $agence ;
        }

        if ($categorie) {
            $query .= " and cc.id = " . $categorie ;
        }

        if ($recherche_par == 1) {
            $query .= " and ch.nom like '%" . $a_rechercher . "%'";
        }

        $query .= " order by ch.nom asc";

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        return $result;
    }

    public function search(
        $agence,
        $nb_pers,
        $categorie,
        $date_entree,
        $date_sortie
    )
    {
        $em = $this->getEntityManager();
        
        $query = "  select ch.id, ch.nom, cc.nom as categorie, ch.nb_pers, ch.tarif_pers, ch.tarif_pers_petit_dejeuner, ch.statut, ch.disponibilite, cc.caracteristiques, tc.nom as type
                    from chambre ch
                    inner join categorie_chambre cc on (ch.categorie_chambre = cc.id)
                    inner join type_chambre tc on (cc.type_chambre = tc.id)
                    where ch.nom is not null ";

        if ($agence) {
            $query .= " and ch.agence = " . $agence ;
        }

        if ($categorie) {
            $query .= " and cc.id = " . $categorie ;
        }

        $query .= " and ch.nb_pers >= " . $nb_pers;

        $query .= " order by ch.nom asc";

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        return array_filter($result, function ($item) use ($date_entree, $date_sortie){

            return $this->isRangeAvailable($date_entree, $date_sortie, $item);

        });
    }

    public function isRangeAvailable($start, $end, $item){
        $reservations = $this->findBookingsByRoom( $item['id'] );

        $reservedPeriod = array_map(function ($reservation){

            $periods = new \DatePeriod(
                \DateTime::createFromFormat('j/m/Y', $reservation['date_entree']),
                new \DateInterval('P1D'),
                \DateTime::createFromFormat('j/m/Y', $reservation['date_sortie'])
            );

            $dates = [];

            foreach ($periods as $period) {
                $dates[] = $period->format('Y-m-d');
            }

            return $dates;
        }, $reservations);


        $reservedDates = array();

        if (count($reservedPeriod) > 0) {
            $reservedDates = call_user_func_array('array_merge', $reservedPeriod);
        }

        $requestedPeriod = new \DatePeriod(
            $start,
            new \DateInterval('P1D'),
            $end
        );

        $requestedDates = [];
        foreach ($requestedPeriod as $period) {
            $requestedDates[] = $period->format('Y-m-d');
        }

        $intersection = array_intersect($requestedDates, $reservedDates);

        if( empty($intersection)) {

            return true;
        }

        return empty($intersection);
    }

    public function findBookingsByRoom($chambre_id)
    {
        $em = $this->getEntityManager();
        
        $query = "  select date_format(b.date_entree,'%d/%m/%Y') as date_entree, date_format(b.date_sortie,'%d/%m/%Y') as date_sortie
                    from booking b
                    where b.id is not null 
                    and b.statut != 5";

        $query .= " and b.chambre = " . $chambre_id;

        $query .= " order by b.date asc";

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        return $result;
    }
}
