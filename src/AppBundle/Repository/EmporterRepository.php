<?php

namespace AppBundle\Repository;

/**
 * EmporterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmporterRepository extends \Doctrine\ORM\EntityRepository
{
    public function consultation(
        $agence, 
        $statut = 100,
        $id = 0,
        $ficheconsommation = 0,
        $booking_id = 0,
        $type_date = '', 
        $mois = '', 
        $annee = '', 
        $date_specifique = '', 
        $debut_date = '', 
        $fin_date = ''
    )
    {
        $em = $this->getEntityManager();
        
        $query = "  select e.id, date_format(e.date,'%d/%m/%Y') as date, e.statut, e.total, CONCAT(LPAD(e.id, 6, '0'),'/AE') as num, 'emporter' as type_commande, CONCAT(LPAD(b.id, 6, '0'),'/HB') as num_booking
                    from emporter e
                    left join booking b on (b.id = e.booking)
                    where e.id is not null ";

        if ($agence) {
            $query .= " and e.agence = " . $agence ;
        }

        if ($id) {
            $query .= " and e.id = " . $id ;
        }

        if ($booking_id) {
            $query .= " and b.id = " . $booking_id ;
        }

        if ($statut != 100) {
            if ($statut == 200) {
                $query .= " and e.statut > 1 " ;
            } else {
                if ($statut) {
                    $query .= " and e.statut = " . $statut ;
                }
            }
        }

        if ($ficheconsommation) {
            $query .= " and e.booking is not null";
        }

        if ($type_date) {
            switch ($type_date) {
                case '1':
                    $now = new \DateTime();
                    $dateNow = $now->format('d-m-Y');
                    $query .= " and date_format(e.date,'%d-%m-%Y') = '" . $dateNow ."'";
                    break;
                
                case '2':
                    $moisAnnee = $mois . "-" . $annee;
                    $query .= " and date_format(e.date,'%m-%Y') = '" . $moisAnnee ."'";
                    break;

                case '3':
                    $query .= " and date_format(e.date,'%Y') = '" . $annee ."'";
                    break;

                case '4':
                    // $date = \DateTime::createFromFormat('j/m/Y', $date_specifique);
                    $query .= " and date_format(e.date,'%d/%m/%Y') = '" . $date_specifique ."'";
                    break;

                case '5':
                    $query .= " and date_format(e.date,'%d/%m/%Y') >= '" . $debut_date ."'";
                    $query .= " and date_format(e.date,'%d/%m/%Y') <= '" . $fin_date ."'";
                    break;
            }
        }

        $query .= " order by e.id desc";

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        return $result;
    }

    public function notificationsEmporters()
    {
        $compteur = 0;
        $em = $this->getEntityManager();
        $query = "select COUNT(e.id) as compteur from emporter e WHERE e.statut = 1";

        $statement = $em->getConnection()->prepare($query);
        $statement->execute();

        $result = $statement->fetchAll(); 

        return ($result[0]['compteur']) ? $result[0]['compteur'] : 0 ;
    }
}
