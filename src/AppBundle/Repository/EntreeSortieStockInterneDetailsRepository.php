<?php

namespace AppBundle\Repository;

/**
 * EntreeSortieStockInterneDetailsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntreeSortieStockInterneDetailsRepository extends \Doctrine\ORM\EntityRepository
{
    public function consultation(
        $agence,
        $stock_interne,
        $type,
        $type_date = '', 
        $mois = '', 
        $annee = '', 
        $date_specifique = '', 
        $debut_date = '', 
        $fin_date = ''
    )
    {

        $em = $this->getEntityManager();

        $query = "  select date_format(esd.date,'%d/%m/%Y') as date, si.nom as nom, esd.portion, si.id as si_id, si.portion as si_portion, esd.type, esd.total
                    from entree_sortie_stock_interne_details esd
                    inner join stock_interne si on (esd.stock_interne = si.id)
                    inner join entree_sortie_stock_interne essi on (esd.entree_sortie_stock_interne = essi.id)
                    where esd.id is not null";

        if ($agence) {
            $query .= " and essi.agence = " . $agence ;
        }

        if ($stock_interne) {
            $query .= " and si.id = " . $stock_interne ;
        }

        if ($type) {

            if ($type == 1) {
                $query .= " and (esd.type is null or esd.type = " . $type . ")" ;
            } else {
                $query .= " and esd.type = " . $type ;
            }

        }

        if ($type_date) {

            $options = array(
                'type_date' =>$type_date,
                'mois' =>$mois,
                'annee' =>$annee,
                'date_specifique' =>$date_specifique,
                'debut_date' =>$debut_date,
                'fin_date' =>$fin_date,
            );

            $query .= $this->dateQuery($options);
            
        }

        $query .= " order by esd.id desc";

        $statement = $em->getConnection()->prepare($query);

        $statement->execute();

        $result = $statement->fetchAll();

        return $result;
    }

    public function dateQuery($options)
    {
        $query = "";

        switch ($options['type_date']) {
            case '1':
                $now = new \DateTime();
                $dateNow = $now->format('d-m-Y');
                $query .= " and date_format(esd.date,'%d-%m-%Y') = '" . $dateNow ."'";
                break;
            
            case '2':
                $moisAnnee = $options['mois'] . "-" . $options['annee'];
                $query .= " and date_format(esd.date,'%m-%Y') = '" . $moisAnnee ."'";
                break;

            case '3':
                $query .= " and date_format(esd.date,'%Y') = '" . $options['annee'] ."'";
                break;

            case '4':
                // $date = \DateTime::createFromFormat('j/m/Y', $date_specifique);
                $query .= " and date_format(esd.date,'%d/%m/%Y') = '" . $options['date_specifique'] ."'";
                break;

            case '5':
                $query .= " and date_format(esd.date,'%d/%m/%Y') >= '" . $options['debut_date'] ."'";
                $query .= " and date_format(esd.date,'%d/%m/%Y') <= '" . $options['fin_date'] ."'";
                break;
        }

        return $query;;
    }
}
